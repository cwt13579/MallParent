<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:oxm="http://www.springframework.org/schema/oxm" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	    http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       	http://www.springframework.org/schema/context
       	http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/data/jpa
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/oxm
		http://www.springframework.org/schema/oxm/spring-oxm.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
	<bean id="propertiesConfigBean"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:sysconfig_mysql.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
		<property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}" />
		<property name="breakAfterAcquireFailure" value="${jdbc.breakAfterAcquireFailure}" />
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}" />
		<property name="maxStatements" value="${jdbc.maxStatements}"></property>
		<property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}"></property>
		<property name="numHelperThreads" value="${jdbc.numHelperThreads}"></property>
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"></property>
	</bean>

	<context:annotation-config />
	<!-- 启动扫描注解 -->
	<context:component-scan base-package="com.berchina.*">
		<context:include-filter type="annotation" expression="com.berchina.distribute.frame.annotation.BerBean" />
		<context:include-filter type="annotation" expression="com.berchina.distribute.frame.annotation.BerServiceImpl" />
	</context:component-scan>
	<aop:aspectj-autoproxy />

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--dataSource属性指定要用到的连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!--configLocation属性指定mybatis的核心配置文件 -->
		<property name="configLocation" value="classpath:configuration.xml" />
		<property name="mapperLocations"
			value="classpath:com/berchina/mybatis/mapping/**/*.xml"></property>
	</bean>

	<!-- 配置要扫描的包,可指定多个包，包与包之间用逗号或分号分隔 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.iec.app.order,com.berchina" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 扫描特定后缀的类，默认Dao -->
		<!-- <property name="scanClassNameSuffix" value="Dao"/> -->
	</bean>
	<!-- 激活自动代理功能 -->


	<!-- 开启事务注解驱动 -->
	<tx:annotation-driven />

	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- <tx:annotation-driven transaction-manager="txManager" /> -->
	<!-- 事务通知 要注明rollback-for类型,并不是所有的异常都回滚的 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<!--除了上面标识的方法,其他方法全是只读方法 -->
			<tx:method name="*" propagation="REQUIRED" rollback-for="Throwable" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!-- Service事务管理 com.berchina.util.rpc.two.module.user -->
		<aop:pointcut id="serviceOperation"
			expression="(execution(* com.berchina.order.service.common.*Service.*(..)))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>

	<bean id="serviceList" class="com.iec.core.app.middleware.ServiceList">
		<property name="serverList">
			<list>
				<bean class="com.iec.core.app.middleware.dubbo.DubboServer" />
			</list>
		</property>
	</bean>

	<import resource="dubboservice.xml" />

</beans>